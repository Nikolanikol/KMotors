import { NextRequest, NextResponse } from 'next/server'
import { getAuthAdmin } from '@/lib/auth'
import { supabaseServer } from '@/lib/supabase'

const STORAGE_BUCKET = 'car-images'
const MAX_FILE_SIZE = 5 * 1024 * 1024 // 5MB

export async function POST(req: NextRequest) {
  try {
    console.log('üñºÔ∏è [UPLOAD] –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
    const admin = await getAuthAdmin()
    if (!admin) {
      console.log('‚ùå [UPLOAD] –ê–¥–º–∏–Ω –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
      return NextResponse.json(
        { error: '–ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' },
        { status: 401 }
      )
    }
    console.log(`‚úÖ [UPLOAD] –ê–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: ${admin.email}`)

    // –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª
    const formData = await req.formData()
    const file = formData.get('file') as File

    if (!file) {
      console.log('‚ùå [UPLOAD] –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ formData')
      return NextResponse.json(
        { error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' },
        { status: 400 }
      )
    }

    console.log(`üìÑ [UPLOAD] –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω: ${file.name}, —Ä–∞–∑–º–µ—Ä: ${file.size} –±–∞–π—Ç`)

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
    const allowedTypes = ['image/jpeg', 'image/png', 'image/webp']
    if (!allowedTypes.includes(file.type)) {
      console.log(`‚ùå [UPLOAD] –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø: ${file.type}`)
      return NextResponse.json(
        { error: `–¢–æ–ª—å–∫–æ JPEG, PNG –∏ WebP —Ä–∞–∑—Ä–µ—à–µ–Ω—ã. –ü–æ–ª—É—á–µ–Ω: ${file.type}` },
        { status: 400 }
      )
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
    if (file.size > MAX_FILE_SIZE) {
      console.log(`‚ùå [UPLOAD] –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: ${file.size} > ${MAX_FILE_SIZE}`)
      return NextResponse.json(
        { error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (–º–∞–∫—Å 5MB)' },
        { status: 400 }
      )
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const timestamp = Date.now()
    const random = Math.random().toString(36).substring(2, 9)
    const extension = file.name.split('.').pop() || 'jpg'
    const fileName = `${timestamp}-${random}.${extension}`

    console.log(`üìù [UPLOAD] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è: ${fileName}`)

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º File –≤ Buffer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const buffer = await file.arrayBuffer()

    console.log(`‚è≥ [UPLOAD] –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage...`)

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ Supabase Storage
    const { data, error } = await supabaseServer.storage
      .from(STORAGE_BUCKET)
      .upload(fileName, buffer, {
        contentType: file.type,
        cacheControl: '3600',
        upsert: false,
      })

    if (error) {
      console.error(`‚ùå [UPLOAD] –û—à–∏–±–∫–∞ Supabase –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ:`, error)
      return NextResponse.json(
        { error: `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}` },
        { status: 500 }
      )
    }

    console.log(`‚úÖ [UPLOAD] –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –≤ Supabase: ${data.path}`)

    // –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const { data: publicData } = supabaseServer.storage
      .from(STORAGE_BUCKET)
      .getPublicUrl(fileName)

    const publicUrl = publicData.publicUrl

    console.log(`üåê [UPLOAD] –ü—É–±–ª–∏—á–Ω—ã–π URL: ${publicUrl}`)

    return NextResponse.json(
      { 
        url: publicUrl,
        fileName: fileName,
        message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω'
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå [UPLOAD] –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ'
    if (error instanceof Error) {
      errorMessage = error.message
    }

    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    )
  }
}