import { NextRequest, NextResponse } from 'next/server'
import { incrementCarViews, getCarViews } from '@/lib/db'

// =====================================================
// POST /api/views/[id] - —É–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
// =====================================================
export async function POST(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    console.log(`üëÅÔ∏è [POST /api/views/${id}] –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä...`)

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    await incrementCarViews(id)

    console.log(`‚úÖ [POST] –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∞–≤—Ç–æ: ${id}`)

    return NextResponse.json(
      { 
        message: '–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω',
        carId: id
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå [POST] –û—à–∏–±–∫–∞:', error)
    
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞'
    if (error instanceof Error) {
      errorMessage = error.message
    }

    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    )
  }
}

// =====================================================
// GET /api/views/[id] - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
// =====================================================
export async function GET(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { id } = await params
    console.log(`üëÅÔ∏è [GET /api/views/${id}] –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...`)

    const views = await getCarViews(id)

    console.log(`‚úÖ [GET] –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${views?.view_count || 0}`)

    return NextResponse.json(
      views || { 
        view_count: 0,
        last_viewed: null,
        message: '–ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –µ—â–µ –Ω–µ—Ç'
      },
      { status: 200 }
    )
  } catch (error) {
    console.error('‚ùå [GET] –û—à–∏–±–∫–∞:', error)
    
    let errorMessage = '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏'
    if (error instanceof Error) {
      errorMessage = error.message
    }

    return NextResponse.json(
      { error: errorMessage },
      { status: 500 }
    )
  }
}