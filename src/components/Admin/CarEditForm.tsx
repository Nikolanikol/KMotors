"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { Car } from "@/lib/supabase";
import { Button } from "@/components/ui/button";

import { AlertCircle, CheckCircle, Loader2 } from "lucide-react";
import CarForm from "./Form/CarForm";
import ImageUploader from "./Form/ImageUploader";

interface CarEditFormProps {
  initialCar: Car | null;
  isNew?: boolean;
}

export default function CarEditForm({
  initialCar,
  isNew = false,
}: CarEditFormProps) {
  const router = useRouter();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState("");
  const [success, setSuccess] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
  const [form, setForm] = useState({
    brand: initialCar?.brand || "",
    model: initialCar?.model || "",
    badge: initialCar?.badge || "",
    year: initialCar?.year || new Date().getFullYear(),
    price: initialCar?.price || 0,
    mileage: initialCar?.mileage || 0,
    vin: initialCar?.vin || "",
    fuel: initialCar?.fuel || "–ë–µ–Ω–∑–∏–Ω",
    transmission: initialCar?.transmission || "–ê–≤—Ç–æ–º–∞—Ç",
    description: initialCar?.description || "",
    image_urls: initialCar?.image_urls || [],
    status: initialCar?.status || ("available" as const),
  });

  // –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ —Ñ–æ—Ä–º—ã
  const handleFormChange = (field: string, value: string | number) => {
    setForm((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  // –û–±–Ω–æ–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const handleImagesChange = (images: string[]) => {
    setForm((prev) => ({
      ...prev,
      image_urls: images,
    }));
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è
  const validateForm = (): string | null => {
    if (!form.brand.trim()) return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –º–∞—Ä–∫—É";
    if (!form.model.trim()) return "‚ö†Ô∏è –£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å";
    if (form.year < 1900 || form.year > new Date().getFullYear() + 1)
      return "‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≥–æ–¥";
    if (form.price <= 0) return "‚ö†Ô∏è –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0";
    if (form.mileage < 0) return "‚ö†Ô∏è –ü—Ä–æ–±–µ–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º";
    if (form.image_urls.length === 0) return "‚ö†Ô∏è –î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ";
    return null;
  };

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const validationError = validateForm();
    if (validationError) {
      setError(validationError);
      return;
    }

    setError("");
    setSuccess(false);
    setLoading(true);

    try {
      const method = isNew ? "POST" : "PUT";
      const url = isNew ? "/api/cars" : `/api/cars/${initialCar?.id}`;

      const res = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(form),
      });

      const data = await res.json();

      if (!res.ok) {
        setError(data.error || "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏");
        return;
      }

      setSuccess(true);

      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º SSG –¥–ª—è –∫–∞—Ç–∞–ª–æ–≥–∞
      if (!isNew && initialCar) {
        try {
          const secret = process.env.NEXT_PUBLIC_REVALIDATE_SECRET || "";

          // –ü–µ—Ä–µ—Å—á–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ
          await fetch(
            `/api/revalidate?path=/catalog/${initialCar.id}&secret=${secret}`,
            { method: "POST" }
          ).catch((err) => console.error("Revalidate car page error:", err));

          // –ü–µ—Ä–µ—Å—á–µ—Ç –∫–∞—Ç–∞–ª–æ–≥–∞
          await fetch(`/api/revalidate?path=/catalog&secret=${secret}`, {
            method: "POST",
          }).catch((err) => console.error("Revalidate catalog error:", err));
        } catch (err) {
          console.error("SSG revalidation error:", err);
        }
      }

      // –†–µ–¥–∏—Ä–µ–∫—Ç —á–µ—Ä–µ–∑ 1.5 —Å–µ–∫
      setTimeout(() => {
        router.push("/admin/cars");
        router.refresh();
      }, 1500);
    } catch (err) {
      setError("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
      console.error("Submit error:", err);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-8">
      {/* === –°–û–û–ë–©–ï–ù–ò–Ø === */}

      {error && (
        <div className="flex items-center gap-3 bg-red-50 border-2 border-red-200 text-red-700 px-4 py-4 rounded-lg">
          <AlertCircle className="w-6 h-6 flex-shrink-0" />
          <p className="font-medium">{error}</p>
        </div>
      )}

      {success && (
        <div className="flex items-center gap-3 bg-green-50 border-2 border-green-200 text-green-700 px-4 py-4 rounded-lg">
          <CheckCircle className="w-6 h-6 flex-shrink-0" />
          <p className="font-medium">
            ‚úÖ –ê–≤—Ç–æ {isNew ? "–¥–æ–±–∞–≤–ª–µ–Ω–æ" : "–æ–±–Ω–æ–≤–ª–µ–Ω–æ"} —É—Å–ø–µ—à–Ω–æ! –°–µ–π—á–∞—Å
            –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏–º...
          </p>
        </div>
      )}

      {/* === –§–û–†–ú–ê –î–ê–ù–ù–´–• === */}
      <CarForm form={form} onChange={handleFormChange} />

      {/* === –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û === */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <ImageUploader
          images={form.image_urls}
          onImagesChange={handleImagesChange}
        />
      </div>

      {/* === –ö–ù–û–ü–ö–ò === */}
      <div className="flex gap-4">
        <Button
          type="submit"
          disabled={loading}
          className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-bold py-3 px-6 rounded-lg transition disabled:opacity-50 flex items-center justify-center gap-2"
        >
          {loading ? (
            <>
              <Loader2 className="w-5 h-5 animate-spin" />‚è≥ –°–æ—Ö—Ä–∞–Ω—è–µ–º...
            </>
          ) : (
            <>üíæ {isNew ? "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ" : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}</>
          )}
        </Button>

        <button
          type="button"
          onClick={() => router.back()}
          disabled={loading}
          className="bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-3 px-6 rounded-lg transition disabled:opacity-50"
        >
          ‚Üê –û—Ç–º–µ–Ω–∏—Ç—å
        </button>
      </div>
    </form>
  );
}
